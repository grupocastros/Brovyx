import express from 'express';
import { Parser } from 'rss-parser';
import axios from 'axios';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

// Configura√ß√£o b√°sica
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
dotenv.config();

const app = express();
const parser = new Parser();

// Porta do servidor
const PORT = process.env.PORT || 3000;

// Senha de desenvolvedor (nunca exposta no frontend)
const ADMIN_PASSWORD_PLAIN = "revjeT-2xocme-xibcabX9vhsbsbCcccCkosppTTtkqo::&klp1386489$2t@Q8f#Lz7&Pm!R1";

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

// Fontes de not√≠cias (RSS + APIs)
const SOURCES = [
  // RSS
  { name: "Wired", type: "rss", url: "https://www.wired.com/feed/rss" },
  { name: "ZDNet", type: "rss", url: "https://www.zdnet.com/news/rss.xml" },
  { name: "CNET", type: "rss", url: "https://www.cnet.com/rss/news/" },
  { name: "The Verge", type: "rss", url: "https://www.theverge.com/rss/index.xml" },
  { name: "TechCrunch", type: "rss", url: "http://feeds.feedburner.com/Techcrunch" },
  { name: "Ars Technica", type: "rss", url: "http://feeds.arstechnica.com/arstechnica/index" },
  { name: "Engadget", type: "rss", url: "https://www.engadget.com/rss.xml" },
  { name: "Mashable", type: "rss", url: "https://mashable.com/feeds/rss/tech" },
  { name: "Slashdot", type: "rss", url: "http://rss.slashdot.org/Slashdot/slashdotMain" },
  { name: "Digital Trends", type: "rss", url: "https://www.digitaltrends.com/feed/" },
  // APIs (exemplos - substitua pelas chaves reais)
  { name: "NewsAPI", type: "api", url: `https://newsapi.org/v2/top-headlines?category=technology&apiKey=${process.env.NEWSAPI_KEY}` },
  { name: "GNews", type: "api", url: `https://gnews.io/api/v4/top-headlines?topic=technology&token=${process.env.GNEWS_KEY}` },
  { name: "Mediastack", type: "api", url: `http://api.mediastack.com/v1/news?categories=technology&access_key=${process.env.MEDIASTACK_KEY}` }
];

// Fun√ß√£o para buscar not√≠cias
async function fetchAllNews() {
  const results = await Promise.allSettled(
    SOURCES.map(async (source) => {
      try {
        if (source.type === "rss") {
          const feed = await parser.parseURL(source.url);
          return feed.items.map(item => ({
            id: item.guid || item.link,
            title: item.title,
            excerpt: item.contentSnippet || item.description,
            link: item.link,
            image: item.enclosure?.url || item['media:content']?.url || "https://placehold.co/400x250?text=No+Image",
            source: source.name,
            publishedAt: item.pubDate,
            author: item.creator || "Unknown"
          }));
        } else if (source.type === "api") {
          const response = await axios.get(source.url);
          return (response.data.articles || []).map(article => ({
            id: article.url,
            title: article.title,
            excerpt: article.description,
            link: article.url,
            image: article.urlToImage || "https://placehold.co/400x250?text=No+Image",
            source: source.name,
            publishedAt: article.publishedAt,
            author: article.author || "Unknown"
          }));
        }
      } catch (err) {
        console.error(`Erro ao buscar ${source.name}:`, err.message);
        return [];
      }
    })
  );

  return results
    .filter(r => r.status === 'fulfilled')
    .flatMap(r => r.value)
    .filter(Boolean)
    .sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt));
}

// Rota para buscar not√≠cias
app.get('/api/news', async (req, res) => {
  try {
    const news = await fetchAllNews();
    res.json(news.slice(0, 50));
  } catch (error) {
    res.status(500).json({ error: 'Falha ao buscar not√≠cias' });
  }
});

// Rota de login de desenvolvedor
app.post('/api/auth/login', (req, res) => {
  const { username, password } = req.body;
  if (username === 'developer' && password === ADMIN_PASSWORD_PLAIN) {
    // Em produ√ß√£o, use JWT aqui
    res.json({ success: true, token: 'dev-auth-token' });
  } else {
    res.status(401).json({ error: 'Credenciais inv√°lidas' });
  }
});

// Rota principal - serve o frontend completo
app.get('/', (req, res) => {
  res.send(`
<!DOCTYPE html>
<html lang="pt">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Brovyx News</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .news-card { @apply bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300; }
    .img { @apply w-full h-48 object-cover; }
    .title { @apply font-bold text-lg mb-2 px-4 pt-4; }
    .excerpt { @apply text-gray-600 text-sm px-4; }
    .source { @apply text-xs font-semibold text-blue-600 uppercase tracking-wide; }
    .date { @apply text-xs text-gray-500 px-4; }
    .read-more { @apply block text-center mt-4 bg-blue-600 text-white py-2 rounded; }
    .header { @apply bg-white shadow-sm sticky top-0 z-40; }
    .nav-link { @apply text-gray-700 hover:text-blue-600 pb-4; }
    .nav-link.active { @apply text-blue-600 border-b-2 border-blue-600; }
  </style>
</head>
<body class="bg-gray-50">
  <header class="header">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between h-16">
        <div class="flex items-center">
          <div class="w-10 h-10 bg-gradient-to-br from-blue-600 to-purple-600 rounded-lg flex items-center justify-center">
            <span class="text-white font-bold text-lg">B</span>
          </div>
          <span class="ml-3 text-xl font-bold text-gray-800">Brovyx News</span>
        </div>
        <nav class="flex space-x-8">
          <a href="#" class="nav-link active">Home</a>
          <a href="#" class="nav-link">Tecnologia</a>
          <a href="#" class="nav-link">Contato</a>
        </nav>
      </div>
    </div>
  </header>

  <main class="max-w-7xl mx-auto px-4 py-8">
    <h1 class="text-4xl font-bold text-center mb-4">Not√≠cias de Tecnologia</h1>
    <p class="text-center text-gray-600 mb-12">Atualizado com as √∫ltimas do Wired, ZDNet, CNET, The Verge e mais 30 fontes</p>

    <div id="news-container" class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
      <p class="text-center">Carregando not√≠cias de mais de 30 fontes...</p>
    </div>
  </main>

  <footer class="bg-gray-800 text-white text-center py-6 mt-16">
    <p>¬© 2025 Brovyx News. Todos os direitos reservados.</p>
    <p class="text-sm">Contato: economiacaio@gmail.com</p>
  </footer>

  <script>
    // Tradu√ß√µes
    const translations = {
      en: { readMore: "Read More" },
      pt: { readMore: "Ler Mais" },
      es: { readMore: "Leer M√°s" },
      fr: { readMore: "Lire Plus" },
      it: { readMore: "Leggi di Pi√π" }
    };
    let lang = 'pt';

    // Carregar not√≠cias
    async function loadNews() {
      try {
        const response = await fetch('/api/news');
        const news = await response.json();
        const container = document.getElementById('news-container');
        container.innerHTML = '';

        news.forEach(article => {
          const date = new Date(article.publishedAt).toLocaleDateString(lang, { day: '2-digit', month: 'short', year: 'numeric' });
          const card = document.createElement('article');
          card.className = 'news-card';
          card.innerHTML = \`
            <img src="\${article.image}" alt="\${article.title}" class="img">
            <div class="source">\${article.source}</div>
            <div class="title">\${article.title}</div>
            <p class="excerpt">\${article.excerpt}</p>
            <div class="date">\${date}</div>
            <a href="\${article.link}" target="_blank" class="read-more">\${translations[lang].readMore}</a>
          \`;
          container.appendChild(card);
        });
      } catch (error) {
        document.getElementById('news-container').innerHTML = '<p class="text-center text-red-500">Erro ao carregar not√≠cias. Tente novamente mais tarde.</p>';
      }
    }

    window.onload = loadNews;
  </script>
</body>
</html>
  `);
});

// Iniciar servidor
app.listen(PORT, () => {
  console.log(\`‚úÖ Brovyx News rodando na porta \${PORT}\`);
  console.log('üì∞ Integrando 30+ APIs de not√≠cias');
  console.log('üîí Login de desenvolvedor ativo');
  console.log('üåê Acesse: http://localhost:3000');
});
